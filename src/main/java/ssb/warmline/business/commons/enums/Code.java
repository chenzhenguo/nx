/*     */ package ssb.warmline.business.commons.enums;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.text.MessageFormat;
/*     */ import java.util.HashMap;
/*     */ import java.util.Map;
/*     */ import ssb.warmline.business.commons.config.ResponseStatus;
/*     */ 
/*     */ public enum Code
/*     */ {
/*   9 */   Code10000("10000", "接口调用成功"), 
/*  10 */   Code10001("10001", "{0}接口发生错误，错误信息为：{1}"), 
/*  11 */   Code10010("10010", "{0}接口未配置相对应的接口类"), 
/*  12 */   Code10011("10011", "{0}接口未配置相对应的接口方法"), 
/*  13 */   Code10012("10012", "接口编号{0}不能为空"), 
/*  14 */   Code10013("10013", "{0}接口不存在"), 
/*  15 */   Code10014("10014", "{0}接口中设备类型不能为空"), 
/*  16 */   Code10015("10015", "{0}接口配置的接口类不能实例化，可能不存在"), 
/*  17 */   Code10016("10016", "{0}接口未开启，请开启后使用"), 
/*  18 */   Code10017("10017", "{0}接口配置接口继承BaseInterface类"), 
/*  19 */   Code10018("10018", "参数类型不匹配"), 
/*  20 */   Code10019("10019", "参数不能为空"), 
/*  21 */   Code10020("10020", "用户未登录"), 
/*  22 */   Code10021("10021", "输入信息有误，请检查输入信息"), 
/*  23 */   Code10022("10022", "A任务列表为空"), 
/*  24 */   Code10023("10023", "请上传文件"), 
/*  25 */   Code10024("10024", "身份证信息解析失败"), 
/*  26 */   Code10025("10025", "没有红包记录"), 
/*  27 */   Code10026("10026", "操作过于频繁，1分钟后重试"), 
/*  28 */   Code10027("10027", "当前IP{0}的当前手机号{1}超过系统设定的8次限制"), 
/*     */ 
/*  30 */   Code10029("10029", "银行卡号不能为空"), 
/*  31 */   Code10030("10030", "一个用户只能创建三个被投保人"), 
/*  32 */   Code10031("10031", "没有保单"), 
/*  33 */   Code10032("10032", "需要补录"), 
/*  34 */   Code10033("10033", ""), 
/*  35 */   Code10034("10034", "填写信息不能为空"), 
/*     */ 
/*  37 */   Code10035("10035", "您的兑换码已经使用"), 
/*  38 */   Code10036("10036", "活动未开始"), 
/*  39 */   Code10037("10037", "活动已经截至"), 
/*  40 */   Code10038("10038", "兑换码已过期"), 
/*  41 */   Code10039("10039", "兑换数量超过最大兑换值"), 
/*  42 */   Code10040("10040", "openid不相同"), 
/*  43 */   Code10041("10041", "超过兑换最大数量"), 
/*  44 */   Code10042("10042", "本产品限购一次，您已购买"), 
/*  45 */   Code10043("10043", "未购买"), 
/*  46 */   Code10044("10044", "无效的兑换码"), 
/*  47 */   Code10045("10045", "不能重复投保"), 
/*  48 */   Code10046("10046", "该车牌已投保"), 
/*  49 */   Code10047("10047", "验证码错误"), 
/*  50 */   Code10048("10048", "身份证错误"), 
/*  51 */   Code10049("10049", "被投保人年龄未满18周岁"), 
/*  52 */   Code10050("10050", "只能通过自己的身份证号购买产品"), 
/*  53 */   Code10051("10051", "被投保人年龄不能超过75周岁"), 
/*  54 */   Code10052("10052", "该车牌号超过投保份数"), 
/*  55 */   Code10053("10053", "该车牌号已买过其他产品"), 
/*  56 */   Code10054("10054", "订单已失效"), 
/*  57 */   Code10055("10055", "卡号有误，请核对"), 
/*  58 */   Code10060("10060", "无效的激活码"), 
/*  59 */   Code10061("10061", "接口调用失败"), 
/*  60 */   Code10062("10062", "没有优惠券"), 
/*  61 */   Code10063("10063", "中秋活动不支持兑换"), 
/*  62 */   Code10064(
/*  63 */     "10064", "状态不正确"), 
/*  64 */   Code10065("10065", "状态不正确"), 
/*  65 */   Code10066(
/*  66 */     "10066", "uid不能为空"), 
/*  67 */   Code10067("10067", "登录令牌不能为空"), 
/*  68 */   Code10068("10068", "登录失效，请重新登录。"), 
/*  69 */   Code10069("10069", "你的帐号于{0}在另一台移动端登录。如非本人操作，则密码可能已泄露，建议修改密码。"), 
/*  70 */   Code10070("10070", "验证码错误"), 
/*  71 */   Code10071("10071", "token错误"), 
/*  72 */   Code10072("10072", "用户不存在请注册！"), 
/*  73 */   Code10073("10073", "用户名或密码错误"), 
/*  74 */   Code10074("10074", "验证码失效"), 
/*  75 */   Code10075("10075", "验证码不能为空"), 
/*  76 */   Code10076("10076", "没有登录信息"), 
/*  77 */   Code10077("10077", "退出登录成功"), 
/*  78 */   Code10078("10078", "没有提交任何购卡信息"), 
/*  79 */   Code10079("10079", "原密码错误"), 
/*  80 */   Code10080("10080", "密码修改成功"), 
/*  81 */   Code10081("10081", "该用户没有提现记录"), 
/*  82 */   Code10082("10082", "两次密码不一致"), 
/*  83 */   Code10083("10083", "当前提现金额已超出订单提现金额"), 
/*  84 */   Code10084("10084", "当前提现金额已超出营销提现金额"), 
/*  85 */   Code10085("10085", "您有一笔订单提现申请，正在处理中！"), 
/*  86 */   Code10086("10086", "您有一笔营销提现申请，正在处理中！"), 
/*  87 */   Code10087("10087", "未找到分享url！"), 
/*  88 */   Code10088("10088", "您未绑定银行卡"), 
/*  89 */   Code10089("10089", "账户余额不足"), 
/*  90 */   Code10090("10090", "卡号已被激活"), 
/*  91 */   Code10091("10091", "卡片已被购买"), 
/*  92 */   Code10092("10092", "卡片未出库"), 
/*  93 */   Code10093("10093", "该用户未签约"), 
/*  94 */   Code10094("10094", "接口发生错误"), 
/*  95 */   Code10095("10095", "无效的订单类型"), 
/*  96 */   Code10096("10096", "非法的姓名"), 
/*  97 */   Code10097("10097", "非法的证件号码"), 
/*  98 */   Code10098("10098", "非法的车牌号"), 
/*  99 */   Code10099("10099", "无效的车辆类型"), 
/* 100 */   Code10100("10100", "无效的电话号码"), 
/* 101 */   Code10101("10101", "无效的证件类型"), 
/* 102 */   Code10102("10102", "无效的订单流水号"), 
/* 103 */   Code10103("10103", "此流水号已使用"), 
/* 104 */   Code10104("10104", "IP未授权"), 
/*     */ 
/* 106 */   Code10105("10105", "红包已被领取"), 
/* 107 */   Code10106("10106", "您未参与此活动"), 
/* 108 */   Code10107("10107", "领取失败"), 
/*     */ 
/* 110 */   Code10108("10108", "生成保单延迟"), 
/* 111 */   Code10109("10109", "无效的业务号码"), 
/* 112 */   Code10110("10110", "购买份数超限"), 
/* 113 */   Code10111("10111", "投保时间异常"), 
/* 114 */   Code10112("10112", "被投保人年龄未满1周岁"), 
/* 115 */   Code10113("10113", "被投保人年龄不能超过69周岁"), 
/* 116 */   Code10114("10114", "投保人年龄未满16周岁"), 
/* 117 */   Code10115("10115", "投保人年龄不能超过65周岁"), 
/* 118 */   Code10116("10116", "投保异常！请联系网站管理员"), 
/* 119 */   Code10117("10117", "该手机号已注册！"), 
/* 120 */   Code10118("10118", "投保人年龄未满18周岁！"), 
/* 121 */   Code10119("10119", "该用户未注册！请注册！"), 
/* 122 */   Code10120("10120", "密码错误！"), 
/* 123 */   Code10121("10121", "旧密码错误！"), 
/* 124 */   Code10122("10122", "密码不一致,修改失败！"), 
/* 125 */   Code10123("10123", "投保人年龄不能超过70周岁"), 
/* 126 */   Code10124("10124", "当前提现金额已超出提现金额"), 
/* 127 */   Code10125("10125", "退出失败！"), 
/* 128 */   Code10126("10126", "您还没有绑定银行卡,请联系客服人员绑定您的银行卡！"), 
/* 129 */   Code10127("10127", "您当前存在一笔提现申请正在审核中,不能再次申请！"), 
/*     */ 
/* 131 */   Code20001(
/* 132 */     "20001", "需要实名认证和职业认证，请先认证"), 
/* 133 */   Code20002("20002", "您已经申请过此订单，请勿重新申请！"), 
/* 134 */   Code20003("20003", "您有两个未完成订单，无法接单！"), 
/* 135 */   Code20004("20004", "服务已完成请勿重新点击！"), 
/* 136 */   Code20006("20006", "发布紧急订单需要进行实名认证！"), 
/* 137 */   Code20007("20007", "发布普通订单需要进行实名认证！"), 
/* 138 */   Code20008("20008", "接紧急订单需要进行实名认证！"), 
/* 139 */   Code20009("20009", "接紧急订单需要进行职业认证！"), 
/* 140 */   Code20010("20010", "接紧急订单职业证书正在审核！"), 
/* 141 */   Code20011("20011", "接普通订单您需要进行实名认证！"), 
/* 142 */   Code20012("20012", "用户为空,出现错误！"), 
/* 143 */   Code20013("20013", "提现金额大于余额！"), 
/* 144 */   Code20014("20014", "订单不能选择自己为帮助人"), 
/* 145 */   Code20015("20015", "确定联系人有误，请核实！"), 
/* 146 */   Code20016("20016", "超过了8次数！"), 
/* 147 */   Code20017("20017", "获取验证码太频繁，请1分钟后再请求!"), 
/* 148 */   Code20018("20018", "获取验证码十分钟只能发送三次！"), 
/* 149 */   Code20019("20019", "接受预订单需要在您完成上一个订单后！"), 
/* 150 */   Code20020("20020", "用户不存在！"), 
/* 151 */   Code20021("20021", "此手机号未注册，请注册！"), 
/* 152 */   Code20022("20022", "上传照片失败，请重新上传"), 
/* 153 */   Code20023("20023", "手机用户不存在,无法获得验证码,请确定！"), 
/* 154 */   Code20024("20024", "用户认证失败，请重新认证!"), 
/* 155 */   Code20025("20025", "没有查询到当前订单!"), 
/* 156 */   Code20026("20026", "该区域还没有添加分类！"), 
/* 157 */   Code20027("20027", "uid参数不能为空！"), 
/* 158 */   Code20028("20028", "没有发现上传图片文件夹！"), 
/* 159 */   Code20029("20029", "该订单不在服务中行列,请确定!"), 
/* 160 */   Code20030("20030", "提现金额不能少于100元！"), 
/* 161 */   Code20031("20031", "没有选择支付方式，支付失败！"), 
/* 162 */   Code20032("20032", "昵称已存在不能重复！"), 
/* 163 */   Code20033("20033", "手机号出现重复请联系客服！"), 
/* 164 */   Code20034("20034", "您当前没有登录权限，如有问题请联系管理员！"), 
/* 165 */   Code20035("20035", "用户不存在或者区号错误，请确认！"), 
/* 166 */   Code20036("20036", "接单人用户查询为空，确定后重新查询！"), 
/* 167 */   Code20037("20037", "结束时间已过不能选择接单人，您可以取消订单重新发订单！"), 
/* 168 */   Code20038("20038", "该支付宝账户已经存在，请检查！"), 
/* 169 */   Code20039("20039", "用户密码为空未完成注册，请继续注册！"), 
/* 170 */   Code20040("20040", "区域id没有查到为空！"), 
/* 171 */   Code20041("20041", "您的订单没有评价，无法完成！"), 
/* 172 */   Code20042("20042", "您的订单已经完成，无需重复完成！"), 
/* 173 */   Code20043("20043", "发单人用户不存在！"), 
/* 174 */   Code20044("20044", "系统消息路径没有查询到！"), 
/* 175 */   Code20045("20045", "订单已支付！"), 
/* 176 */   Code20046("20046", "钱包余额不足，请选择其他支付方式！"), 
/* 177 */   Code20047("20047", "用户不存在或用户已经登出系统！"), 
/* 178 */   Code20048("20048", "订单不存在！"), 
/* 179 */   Code20049("20049", "发单人订单不存在！"), 
/* 180 */   Code20050("20050", "身份证号码不正确，请确认！"), 
/* 181 */   Code20051("20051", "护照号码不正确，请确认！"), 
/* 182 */   Code20052("20052", "该手机号已经注册，请登录！"), 
/* 183 */   Code20053("20053", "您已经实名认证，无需重复认证！"), 
/* 184 */   Code20054("20054", "您的求助包含敏感词为：{0}"), 
/* 185 */   Code20055("20055", "没有查询到该区域信息！"), 
/* 186 */   Code20056("20056", "该订单已经取消，不能重复取消！"), 
/* 187 */   Code20057("20057", "您输入的证件号码已存在！");
/*     */ 
/*     */   String code;
/*     */   String codeMsg;
/* 267 */   static Map<String, Code> codesMemory = new HashMap();
/*     */ 
/*     */   private Code(String code, String codeMsg)
/*     */   {
/* 193 */     this.code = code;
/* 194 */     this.codeMsg = codeMsg;
/*     */   }
/*     */ 
/*     */   public String getCode() {
/* 198 */     return this.code;
/*     */   }
/*     */ 
/*     */   public String getCodeMsg() {
/* 202 */     return this.codeMsg;
/*     */   }
/*     */ 
/*     */   public static Code getCode(ResponseStatus status) {
/* 206 */     for (Code c : values()) {
/* 207 */       if ((status.getRespCode().equals(c.code)) && (status.getRespMsg().equals(c.codeMsg))) {
/* 208 */         return c;
/*     */       }
/*     */     }
/* 211 */     return null;
/*     */   }
/*     */ 
/*     */   public static Code getErrorMsgVerifyWord(String code, String[] args) {
/* 215 */     if (codesMemory.containsKey(code)) {
/* 216 */       Code c = (Code)codesMemory.get(code);
/* 217 */       c.codeMsg = ("您的求助包含敏感词为：" + args[0]);
/* 218 */       return c;
/*     */     }
/* 220 */     for (Code c : values()) {
/* 221 */       if (code.equals(c.code)) {
/* 222 */         String codeMsg = c.codeMsg;
/* 223 */         if ((codeMsg.contains("{")) && (codeMsg.contains("}"))) {
/* 224 */           codeMsg = MessageFormat.format(codeMsg, args);
/* 225 */           c.codeMsg = codeMsg;
/*     */         }
/* 227 */         codesMemory.put(code, c);
/* 228 */         return c;
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 233 */     return null;
/*     */   }
/*     */ 
/*     */   public static Code getErrorMsg(String code, String[] args)
/*     */   {
/* 238 */     if (codesMemory.containsKey(code)) {
/* 239 */       Code c = (Code)codesMemory.get(code);
/*     */ 
/* 241 */       if ((c.codeMsg.contains("")) && (c.codeMsg.contains("}"))) {
/* 242 */         c.codeMsg = MessageFormat.format(c.codeMsg, args);
/*     */       }
/* 244 */       return c;
/*     */     }
/* 246 */     for (Code c : values()) {
/* 247 */       if (code.equals(c.code)) {
/* 248 */         String codeMsg = c.codeMsg;
/* 249 */         if ((codeMsg.contains("{")) && (codeMsg.contains("}"))) {
/* 250 */           codeMsg = MessageFormat.format(codeMsg, args);
/* 251 */           c.codeMsg = codeMsg;
/*     */         }
/* 253 */         codesMemory.put(code, c);
/* 254 */         return c;
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 259 */     return null;
/*     */   }
/*     */ 
/*     */   public static void main(String[] args) {
/* 263 */     Code code = getErrorMsg("10001", new String[] { "qinbin" });
/* 264 */     System.out.println(code.codeMsg);
/*     */   }
/*     */ }

/* Location:           D:\用户目录\我的文档\Tencent Files\863916185\FileRecv\nx.zip
 * Qualified Name:     ROOT.WEB-INF.classes.ssb.warmline.business.commons.enums.Code
 * JD-Core Version:    0.6.2
 */